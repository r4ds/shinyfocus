% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/observe.R
\name{observe_focus}
\alias{observe_focus}
\title{Respond when input gains focus}
\usage{
observe_focus(
  id,
  ...,
  priority = 99999,
  session = shiny::getDefaultReactiveDomain()
)
}
\arguments{
\item{id}{The ID string of an input.}

\item{...}{
  Arguments passed on to \code{\link[shiny:observeEvent]{shiny::observeEvent}}
  \describe{
    \item{\code{handlerExpr}}{The expression to call whenever \code{eventExpr} is
invalidated. This should be a side-effect-producing action (the return
value will be ignored). It will be executed within an \code{\link[shiny:isolate]{isolate()}}
scope.}
    \item{\code{handler.env}}{The parent environment for the reactive expression. By default,
this is the calling environment, the same as when defining an ordinary
non-reactive expression. If \code{handlerExpr} is a quosure and \code{handler.quoted} is \code{TRUE},
then \code{handler.env} is ignored.}
    \item{\code{handler.quoted}}{If it is \code{TRUE}, then the \code{\link[=quote]{quote()}}ed value of \code{handlerExpr}
will be used when \code{handlerExpr} is evaluated. If \code{handlerExpr} is a quosure and you
would like to use its expression as a value for \code{handlerExpr}, then you must set
\code{handler.quoted} to \code{TRUE}.}
    \item{\code{suspended}}{If \code{TRUE}, start the observer in a suspended state. If
\code{FALSE} (the default), start in a non-suspended state.}
    \item{\code{domain}}{See \link[shiny]{domains}.}
    \item{\code{autoDestroy}}{If \code{TRUE} (the default), the observer will be
automatically destroyed when its domain (if any) ends.}
    \item{\code{ignoreNULL}}{Whether the action should be triggered (or value
calculated, in the case of \code{eventReactive}) when the input is
\code{NULL}. See Details.}
    \item{\code{ignoreInit}}{If \code{TRUE}, then, when this \code{observeEvent} is
first created/initialized, ignore the \code{handlerExpr} (the second
argument), whether it is otherwise supposed to run or not. The default is
\code{FALSE}. See Details.}
    \item{\code{once}}{Whether this \code{observeEvent} should be immediately destroyed
after the first time that the code in \code{handlerExpr} is run. This
pattern is useful when you want to subscribe to a event that should only
happen once.}
  }}

\item{priority}{An integer that controls the priority with which the observer
should be executed. It often makes sense for this priority to be very high
to avoid conflicts.}

\item{session}{The session in which the observer will be created. The default
is almost always desired.}
}
\value{
A shiny observer (see \code{\link[shiny:observe]{shiny::observe()}}).
}
\description{
Set up a \code{\link[shiny:observeEvent]{shiny::observeEvent()}} observer to trigger when the named input
gains focus.
}
\examples{
## Only run examples in interactive R sessions
if (interactive()) {

  # App 1: A relatively simple ui without modules.
  shiny::shinyApp(
    ui = shiny::fluidPage(
      shinyfocus_js_dependency(),
      shiny::textInput("input1", "Input 1"),
      shiny::textInput("input2", "Input 2"),
      shiny::actionButton("go_button", "Go!"),
      shiny::textOutput("focusing")
    ),
    server = function(input, output, session) {
      # Update the value in focusing whenever input1 has focus.
      observe_focus(
        "input1",
        output$focusing <- shiny::renderText(
          paste(
            "You entered input1 at",
            Sys.time()
          )
        )
      )
    }
  )

  # App 2: With module.
  focusUI <- function(id) {
    shiny::tagList(
      shiny::textInput(shiny::NS(id, "observe_me"), "Observe me"),
      shiny::textOutput(NS(id, "focusing"))
    )
  }
  focusServer <- function(id) {
    moduleServer(id, function(input, output, session) {
      observe_focus(
        "observe_me",
        output$focusing <- shiny::renderText(
          paste(
            "You entered observe_me at",
            Sys.time()
          )
        )
      )
    })
  }

  shiny::shinyApp(
    ui = shiny::fluidPage(
      shinyfocus_js_dependency(),
      focusUI("focus_module"),
      shiny::textInput("another_input", "Another input"),
      shiny::actionButton("go_button", "Go!")
    ),
    server = function(input, output, session) {
      focusServer("focus_module")
    }
  )
}
}
\seealso{
Other observers: 
\code{\link{observe_blur}()},
\code{\link{observe_focus_change}()}
}
\concept{observers}
